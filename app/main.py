from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Optional
import sqlite3
from datetime import datetime
import logging
import time  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="FSSP-Tracker MVP", version="1.0")

# --- –ú–æ–¥–µ–ª—å Pydantic –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
class DebtorIn(BaseModel):
    debtor_name: str
    debtor_dob: str  # "1980-01-01"
    ip_number: Optional[str] = None
    client_id: str  # ID –∏–∑ CRM

# --- –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ---
class CheckResult(BaseModel):
    status: str
    message: str
    debtor_name: str
    ip_number: Optional[str] = None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –ë–î ---
def init_db():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        conn = sqlite3.connect('fsps.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS debtors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_id TEXT NOT NULL,
                debtor_name TEXT NOT NULL,
                debtor_dob TEXT NOT NULL,
                ip_number TEXT,
                status TEXT DEFAULT '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")

init_db()

# --- –ò–º–∏—Ç–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ---
class MockServices:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API"""
    
    @staticmethod
    def mock_fssp_check(ip_number: str) -> str:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –§–°–°–ü.
        –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP-–∑–∞–ø—Ä–æ—Å –∫ API.
        """
        logger.info(f"üîç –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É –§–°–°–ü –¥–ª—è –ò–ü: {ip_number}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏ 1-2 —Å–µ–∫—É–Ω–¥—ã
        time.sleep(1.5)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if ip_number and "123" in ip_number:
            return "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ"
        elif ip_number and "456" in ip_number:
            return "–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ"
        elif ip_number:
            return "–ò—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        else:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω"

    @staticmethod
    def send_to_crm(client_id: str, status: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ CRM (–Ω–∞–ø—Ä–∏–º–µ—Ä, Bitrix24)"""
        logger.info(f"üìä –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ CRM: –ö–ª–∏–µ–Ω—Ç {client_id} -> –°—Ç–∞—Ç—É—Å {status}")
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã REST API –∑–∞–ø—Ä–æ—Å –∫ CRM:
        # requests.post('https://crm.ru/webhook', json={'client_id': client_id, 'status': status})

    @staticmethod
    def send_to_bot(phone: str, message: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ API –±–æ—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Aimylogic)"""
        logger.info(f"ü§ñ –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ –±–æ—Ç–∞: –ù–∞ –Ω–æ–º–µ—Ä {phone} -> {message}")
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –±–æ—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
        # requests.post('https://aimylogic.com/api/send', json={'phone': phone, 'text': message})

# --- –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ---
@app.post("/check-status/", response_model=CheckResult)
async def check_fssp_status(debtor: DebtorIn, background_tasks: BackgroundTasks):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CRM –∏ –±–æ—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è: {debtor.debtor_name}")
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
        conn = sqlite3.connect('fsps.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO debtors (client_id, debtor_name, debtor_dob, ip_number)
            VALUES (?, ?, ?, ?)
        ''', (debtor.client_id, debtor.debtor_name, debtor.debtor_dob, debtor.ip_number))
        conn.commit()
        conn.close()

        # 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É –§–°–°–ü
        fssp_status = MockServices.mock_fssp_check(debtor.ip_number)

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        conn = sqlite3.connect('fsps.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE debtors SET status = ? WHERE client_id = ?
        ''', (fssp_status, debtor.client_id))
        conn.commit()
        conn.close()

        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        background_tasks.add_task(MockServices.send_to_crm, debtor.client_id, fssp_status)
        
        # –ï—Å–ª–∏ –¥–æ–ª–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω, "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç
        if fssp_status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ":
            background_tasks.add_task(
                MockServices.send_to_bot, 
                "+79991234567", # –ó–¥–µ—Å—å –±—ã–ª –±—ã –Ω–æ–º–µ—Ä –∏–∑ CRM
                f"–î–æ–ª–≥ –ø–æ –ò–ü {debtor.ip_number} –∏—Å–ø–æ–ª–Ω–µ–Ω. –°—É–º–º–∞: 150000 —Ä—É–±."
            )

        return CheckResult(
            status="success",
            message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {fssp_status}",
            debtor_name=debtor.debtor_name,
            ip_number=debtor.ip_number
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# --- GET –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@app.get("/add-test-debtor/")
async def add_test_debtor_get():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('fsps.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO debtors (client_id, debtor_name, debtor_dob, ip_number, status)
            VALUES (?, ?, ?, ?, ?)
        ''', ('test_client_1', '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', '1980-01-01', '12345/20/123456-–ò–ü', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω'))
        
        conn.commit()
        conn.close()
        
        return {"message": "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"}
    
    except Exception as e:
        return {"error": str(e)}

@app.get("/debtors/")
async def get_all_debtors():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('fsps.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM debtors")
        rows = cursor.fetchall()
        conn.close()
        
        debtors = []
        for row in rows:
            debtors.append({
                "id": row[0],
                "client_id": row[1],
                "debtor_name": row[2],
                "debtor_dob": row[3],
                "ip_number": row[4],
                "status": row[5],
                "created_at": row[6]
            })
        
        return {"debtors": debtors}
    
    except Exception as e:
        return {"error": str(e)}

@app.get("/")
async def root():
    return {"message": "FSSP-Tracker MVP —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /docs –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."}